#!/usr/bin/env python

import getopt
import os
import signal
import sys
import syslog

import swsssdk

from supervisor import childutils

# Contents of file should be the names of critical processes (as defined in
# supervisor.conf file), one per line
CRITICAL_PROCESSES_FILE = '/etc/supervisor/critical_processes'

# This table in databse contains the features for container and each
# feature for a row will be configured a state or number.
CONTAINER_FEATURE_TABLE_NAME = 'CONTAINER_FEATURE'

def main(argv):
    container_name = None
    opts, args = getopt.getopt(argv, "c:", ["container-name="])
    for opt, arg in opts:
        if opt in ("-c", "--container-name"):
            container_name = arg

    if not container_name:
        syslog.syslog(syslog.LOG_ERR, "Container name not specified. Exiting...")
        sys.exit(1)

    # Read the list of critical processes from a file
    with open(CRITICAL_PROCESSES_FILE, 'r') as f:
        critical_processes = [line.rstrip('\n') for line in f]

    while True:
        # Transition from ACKNOWLEDGED to READY
        childutils.listener.ready()

        line = sys.stdin.readline()
        headers = childutils.get_headers(line)
        payload = sys.stdin.read(int(headers['len']))

        # Transition from READY to ACKNOWLEDGED
        childutils.listener.ok()

        # We only care about PROCESS_STATE_EXITED events
        if headers['eventname'] == 'PROCESS_STATE_EXITED':
            payload_headers, payload_data = childutils.eventdata(payload + '\n')

            expected = int(payload_headers['expected'])
            processname = payload_headers['processname']
            groupname = payload_headers['groupname']

            # Read the status of auto-restart feature from Config_DB.
            if container_name != 'database':
                config_db = swsssdk.ConfigDBConnector()
                config_db.connect()
                container_features_table = config_db.get_table(CONTAINER_FEATURE_TABLE_NAME)
                if not container_features_table:
                    syslog.syslog(syslog.LOG_ERR, "Unable to retrieve container features table from Config DB. Exiting...")
                    sys.exit(2)

                if not container_features_table.has_key(container_name):
                    syslog.syslog(syslog.LOG_ERR, "Unable to retrieve features for container '{}'. Exiting...".format(container_name))
                    sys.exit(3)

                restart_feature = container_features_table[container_name].get('auto_restart')
                if not restart_feature:
                    syslog.syslog(syslog.LOG_ERR, "Unable to determine auto-restart feature status for container '{}'. Exiting...".format(container_name))
                    sys.exit(4)

            # If container is database or auto-restart feature is enabled and at the same time 
            # a critical process exited unexpectedly, terminate supervisor
            if ((container_name == 'database' or restart_feature == 'enabled') and expected == 0 and 
                    (processname in critical_processes or groupname in critical_processes)):
                MSG_FORMAT_STR = "Process {} exited unxepectedly. Terminating supervisor..."
                msg = MSG_FORMAT_STR.format(payload_headers['processname'])
                syslog.syslog(syslog.LOG_INFO, msg)
                os.kill(os.getppid(), signal.SIGTERM)


if __name__ == "__main__":
    main(sys.argv[1:])
