From 92f5aee7372748845f11b7a10d880f968769e860 Mon Sep 17 00:00:00 2001
From: Kiran Kella <kiran.kella@broadcom.com>
Date: Wed, 7 Aug 2019 07:22:42 -0700
Subject: [PATCH] Passing fullcone option for SNAT and DNAT

---
 extensions/libipt_DNAT.c       | 22 +++++++++++++++++++++-
 extensions/libipt_MASQUERADE.c | 21 ++++++++++++++++++++-
 extensions/libipt_SNAT.c       | 22 +++++++++++++++++++++-
 3 files changed, 62 insertions(+), 3 deletions(-)

diff --git a/extensions/libipt_DNAT.c b/extensions/libipt_DNAT.c
index a14d16f..4bfab98 100644
--- a/extensions/libipt_DNAT.c
+++ b/extensions/libipt_DNAT.c
@@ -8,14 +8,20 @@
 #include <linux/netfilter_ipv4/ip_tables.h>
 #include <linux/netfilter/nf_nat.h>
 
+/* Temporarily defining here, need to be picked up from the
+ * new kernel header linux/netfilter/nf_nat.h */
+#define NF_NAT_RANGE_FULLCONE  (1 << 5)
+
 enum {
 	O_TO_DEST = 0,
 	O_RANDOM,
 	O_PERSISTENT,
 	O_X_TO_DEST, /* hidden flag */
+	O_FULLCONE,
 	F_TO_DEST   = 1 << O_TO_DEST,
 	F_RANDOM    = 1 << O_RANDOM,
 	F_X_TO_DEST = 1 << O_X_TO_DEST,
+	F_FULLCONE  = 1 << O_FULLCONE
 };
 
 /* Dest NAT data consists of a multi-range, indicating where to map
@@ -32,7 +38,7 @@ static void DNAT_help(void)
 "DNAT target options:\n"
 " --to-destination [<ipaddr>[-<ipaddr>]][:port[-port]]\n"
 "				Address to map destination to.\n"
-"[--random] [--persistent]\n");
+"[--random] [--persistent] [--fullcone]\n");
 }
 
 static const struct xt_option_entry DNAT_opts[] = {
@@ -40,6 +46,7 @@ static const struct xt_option_entry DNAT_opts[] = {
 	 .flags = XTOPT_MAND | XTOPT_MULTI},
 	{.name = "random", .id = O_RANDOM, .type = XTTYPE_NONE},
 	{.name = "persistent", .id = O_PERSISTENT, .type = XTTYPE_NONE},
+	{.name = "fullcone", .id = O_FULLCONE, .type = XTTYPE_NONE},
 	XTOPT_TABLEEND,
 };
 
@@ -185,10 +192,14 @@ static void DNAT_parse(struct xt_option_call *cb)
 static void DNAT_fcheck(struct xt_fcheck_call *cb)
 {
 	static const unsigned int f = F_TO_DEST | F_RANDOM;
+	static const unsigned int c = F_FULLCONE;
 	struct nf_nat_ipv4_multi_range_compat *mr = cb->data;
 
 	if ((cb->xflags & f) == f)
 		mr->range[0].flags |= NF_NAT_RANGE_PROTO_RANDOM;
+
+	if ((cb->xflags & c) == c)
+		mr->range[0].flags |= NF_NAT_RANGE_FULLCONE;
 }
 
 static void print_range(const struct nf_nat_ipv4_range *r)
@@ -224,6 +235,8 @@ static void DNAT_print(const void *ip, const struct xt_entry_target *target,
 			printf(" random");
 		if (info->mr.range[i].flags & NF_NAT_RANGE_PERSISTENT)
 			printf(" persistent");
+		if (info->mr.range[i].flags & NF_NAT_RANGE_FULLCONE)
+			printf(" fullcone");
 	}
 }
 
@@ -239,6 +252,8 @@ static void DNAT_save(const void *ip, const struct xt_entry_target *target)
 			printf(" --random");
 		if (info->mr.range[i].flags & NF_NAT_RANGE_PERSISTENT)
 			printf(" --persistent");
+		if (info->mr.range[i].flags & NF_NAT_RANGE_FULLCONE)
+			printf(" --fullcone");
 	}
 }
 
@@ -282,6 +297,11 @@ static int DNAT_xlate(struct xt_xlate *xl,
 				sep = ",";
 			xt_xlate_add(xl, "%spersistent", sep);
 		}
+		if (info->mr.range[i].flags & NF_NAT_RANGE_FULLCONE) {
+			if (sep_need)
+				sep = ",";
+			xt_xlate_add(xl, "%sfullcone", sep);
+		}
 	}
 
 	return 1;
diff --git a/extensions/libipt_MASQUERADE.c b/extensions/libipt_MASQUERADE.c
index b7b5fc7..88ff650 100644
--- a/extensions/libipt_MASQUERADE.c
+++ b/extensions/libipt_MASQUERADE.c
@@ -8,9 +8,15 @@
 #include <linux/netfilter_ipv4/ip_tables.h>
 #include <linux/netfilter/nf_nat.h>
 
+/* Temporarily defining here, need to be picked up from the
+ * new kernel header linux/netfilter/nf_nat.h */
+#define NF_NAT_RANGE_FULLCONE  (1 << 5)
+
 enum {
 	O_TO_PORTS = 0,
 	O_RANDOM,
+	O_RANDOM_FULLY,
+	O_FULLCONE
 };
 
 static void MASQUERADE_help(void)
@@ -20,12 +26,15 @@ static void MASQUERADE_help(void)
 " --to-ports <port>[-<port>]\n"
 "				Port (range) to map to.\n"
 " --random\n"
-"				Randomize source port.\n");
+"				Randomize source port.\n"
+" --fullcone\n"
+"				Do fullcone NAT mapping.\n");
 }
 
 static const struct xt_option_entry MASQUERADE_opts[] = {
 	{.name = "to-ports", .id = O_TO_PORTS, .type = XTTYPE_STRING},
 	{.name = "random", .id = O_RANDOM, .type = XTTYPE_NONE},
+	{.name = "fullcone", .id = O_FULLCONE, .type = XTTYPE_NONE},
 	XTOPT_TABLEEND,
 };
 
@@ -97,6 +106,9 @@ static void MASQUERADE_parse(struct xt_option_call *cb)
 	case O_RANDOM:
 		mr->range[0].flags |=  NF_NAT_RANGE_PROTO_RANDOM;
 		break;
+	case O_FULLCONE:
+		mr->range[0].flags |=  NF_NAT_RANGE_FULLCONE;
+		break;
 	}
 }
 
@@ -116,6 +128,8 @@ MASQUERADE_print(const void *ip, const struct xt_entry_target *target,
 
 	if (r->flags & NF_NAT_RANGE_PROTO_RANDOM)
 		printf(" random");
+	if (r->flags & NF_NAT_RANGE_FULLCONE)
+		printf(" fullcone");
 }
 
 static void
@@ -132,6 +146,8 @@ MASQUERADE_save(const void *ip, const struct xt_entry_target *target)
 
 	if (r->flags & NF_NAT_RANGE_PROTO_RANDOM)
 		printf(" --random");
+	if (r->flags & NF_NAT_RANGE_FULLCONE)
+		printf(" --fullcone");
 }
 
 static int MASQUERADE_xlate(struct xt_xlate *xl,
@@ -153,6 +169,9 @@ static int MASQUERADE_xlate(struct xt_xlate *xl,
 	if (r->flags & NF_NAT_RANGE_PROTO_RANDOM)
 		xt_xlate_add(xl, "random ");
 
+	if (r->flags & NF_NAT_RANGE_FULLCONE)
+		xt_xlate_add(xl, "fullcone ");
+
 	return 1;
 }
 
diff --git a/extensions/libipt_SNAT.c b/extensions/libipt_SNAT.c
index e92d811..9634ba9 100644
--- a/extensions/libipt_SNAT.c
+++ b/extensions/libipt_SNAT.c
@@ -8,16 +8,22 @@
 #include <linux/netfilter_ipv4/ip_tables.h>
 #include <linux/netfilter/nf_nat.h>
 
+/* Temporarily defining here, need to be picked up from the
+ * new kernel header linux/netfilter/nf_nat.h */
+#define NF_NAT_RANGE_FULLCONE  (1 << 5)
+
 enum {
 	O_TO_SRC = 0,
 	O_RANDOM,
 	O_RANDOM_FULLY,
 	O_PERSISTENT,
 	O_X_TO_SRC,
+	O_FULLCONE,
 	F_TO_SRC       = 1 << O_TO_SRC,
 	F_RANDOM       = 1 << O_RANDOM,
 	F_RANDOM_FULLY = 1 << O_RANDOM_FULLY,
 	F_X_TO_SRC     = 1 << O_X_TO_SRC,
+	F_FULLCONE     = 1 << O_FULLCONE
 };
 
 /* Source NAT data consists of a multi-range, indicating where to map
@@ -34,7 +40,7 @@ static void SNAT_help(void)
 "SNAT target options:\n"
 " --to-source [<ipaddr>[-<ipaddr>]][:port[-port]]\n"
 "				Address to map source to.\n"
-"[--random] [--random-fully] [--persistent]\n");
+"[--random] [--random-fully] [--persistent] [--fullcone]\n");
 }
 
 static const struct xt_option_entry SNAT_opts[] = {
@@ -43,6 +49,7 @@ static const struct xt_option_entry SNAT_opts[] = {
 	{.name = "random", .id = O_RANDOM, .type = XTTYPE_NONE},
 	{.name = "random-fully", .id = O_RANDOM_FULLY, .type = XTTYPE_NONE},
 	{.name = "persistent", .id = O_PERSISTENT, .type = XTTYPE_NONE},
+	{.name = "fullcone", .id = O_FULLCONE, .type = XTTYPE_NONE},
 	XTOPT_TABLEEND,
 };
 
@@ -189,12 +196,15 @@ static void SNAT_fcheck(struct xt_fcheck_call *cb)
 {
 	static const unsigned int f = F_TO_SRC | F_RANDOM;
 	static const unsigned int r = F_TO_SRC | F_RANDOM_FULLY;
+	static const unsigned int c = F_TO_SRC | F_FULLCONE;
 	struct nf_nat_ipv4_multi_range_compat *mr = cb->data;
 
 	if ((cb->xflags & f) == f)
 		mr->range[0].flags |= NF_NAT_RANGE_PROTO_RANDOM;
 	if ((cb->xflags & r) == r)
 		mr->range[0].flags |= NF_NAT_RANGE_PROTO_RANDOM_FULLY;
+	if ((cb->xflags & c) == c)
+		mr->range[0].flags |= NF_NAT_RANGE_FULLCONE;
 }
 
 static void print_range(const struct nf_nat_ipv4_range *r)
@@ -232,6 +242,8 @@ static void SNAT_print(const void *ip, const struct xt_entry_target *target,
 			printf(" random-fully");
 		if (info->mr.range[i].flags & NF_NAT_RANGE_PERSISTENT)
 			printf(" persistent");
+		if (info->mr.range[i].flags & NF_NAT_RANGE_FULLCONE)
+			printf(" fullcone");
 	}
 }
 
@@ -249,6 +261,8 @@ static void SNAT_save(const void *ip, const struct xt_entry_target *target)
 			printf(" --random-fully");
 		if (info->mr.range[i].flags & NF_NAT_RANGE_PERSISTENT)
 			printf(" --persistent");
+		if (info->mr.range[i].flags & NF_NAT_RANGE_FULLCONE)
+			printf(" --fullcone");
 	}
 }
 
@@ -299,6 +313,12 @@ static int SNAT_xlate(struct xt_xlate *xl,
 				sep = ",";
 			xt_xlate_add(xl, "%spersistent", sep);
 		}
+		if (info->mr.range[i].flags & NF_NAT_RANGE_FULLCONE) {
+			if (sep_need)
+				sep = ",";
+			xt_xlate_add(xl, "%sfullcone", sep);
+			sep_need = true;
+		}
 	}
 
 	return 1;
-- 
2.18.0

