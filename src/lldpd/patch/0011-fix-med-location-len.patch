From e9bf329eee94d6d49a17da35aea189179aeed3c6 Mon Sep 17 00:00:00 2001
From: sudhanshukumar22 <sudhanshu.kumar@broadcom.com>
Date: Thu, 24 Dec 2020 09:27:49 -0800
Subject: [PATCH] From 5c3479463a919193213213e2d8634c754c09aa51 Mon Sep 17
 00:00:00 2001 From: Vincent Bernat <vincent@bernat.ch> Date: Sun, 6 Dec 2020
 14:21:04 +0100 Subject: [PATCH] lib: fix LLDP-MED location parsing in
 liblldpctl

Some bounds were not checked correctly when parsing LLDP-MED civic
location fields. This triggers out-of-bound reads (no write) in
lldpcli, ultimately leading to a crash.

Fix #420
Signed-off-by: sudhanshukumar22 <sudhanshu.kumar@broadcom.com>
---
 src/lib/atoms/med.c | 8 ++++++--
 1 file changed, 6 insertions(+), 2 deletions(-)

diff --git a/src/lib/atoms/med.c b/src/lib/atoms/med.c
index e1b20fd..595dba4 100644
--- a/src/lib/atoms/med.c
+++ b/src/lib/atoms/med.c
@@ -540,6 +540,7 @@ _lldpctl_atom_get_str_med_location(lldpctl_atom_t *atom, lldpctl_key_t key)
 		return NULL;
 	case lldpctl_k_med_location_country:
 		if (m->location->format != LLDP_MED_LOCFORMAT_CIVIC) break;
+		if (m->location->data_len < 4) return NULL;
 		value = _lldpctl_alloc_in_atom(atom, 3);
 		if (!value) return NULL;
 		memcpy(value, m->location->data + 2, 2);
@@ -732,8 +733,11 @@ _lldpctl_atom_iter_med_caelements_list(lldpctl_atom_t *atom)
 {
 	struct _lldpctl_atom_med_caelements_list_t *plist =
 	    (struct _lldpctl_atom_med_caelements_list_t *)atom;
-	struct ca_iter *iter = _lldpctl_alloc_in_atom(atom, sizeof(struct ca_iter));
-	if (!iter) return NULL;
+	struct ca_iter *iter;
+	if (plist->parent->location->data_len < 4 ||
+	    *(uint8_t*)plist->parent->location->data < 3 ||
+	    !(iter = _lldpctl_alloc_in_atom(atom, sizeof(struct ca_iter))))
+		return NULL;
 	iter->data = (uint8_t*)plist->parent->location->data + 4;
 	iter->data_len = *(uint8_t*)plist->parent->location->data - 3;
 	return (lldpctl_atom_iter_t*)iter;
-- 
2.12.2

